{"version":3,"sources":["App.tsx","GoodCard.tsx","GoodList.tsx","index.tsx"],"names":["SortType","GoodCard","good","GoodList","goods","map","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","realGoods","visibleGoods","window","console","log","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,0DClBQC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,oBAAI,UAAQ,OAAZ,SACGA,KCAQC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,6BACGA,EAAMC,KAAI,SAACH,GAAD,OACT,cAAC,EAAD,CAAUA,KAAMA,GAAWA,SFApBI,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAyCE,IAAMO,EAAgB,WAC3B,MAAgCC,mBAAmBR,EAASS,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAjCD,SACLV,EADK,GAGJ,IADCM,EACF,EADEA,SAAUE,EACZ,EADYA,WAENG,EAAY,YAAOX,GAuBzB,OArBAY,OAAOC,QAAQC,IAAIR,EAAUE,GAEzBF,GACFK,EAAaI,MAAK,SAACC,EAAOC,GACxB,OAAQX,GACN,KAAKV,EAASsB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKrB,EAASwB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXb,GACFG,EAAaW,UAGRX,EAOLY,CAAkBrB,EAAiB,CAAEI,WAAUE,eAEjD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBlB,IAAaV,EAASsB,SAAW,WAAa,IAC3EQ,QAAS,kBAAMnB,EAAYX,EAASsB,WAHtC,iCAQA,wBACEO,KAAK,SACLD,UAAS,4BAAuBlB,IAAaV,EAASwB,OAAS,WAAa,IAC5EM,QAAS,kBAAMnB,EAAYX,EAASwB,SAHtC,4BAQA,wBACEK,KAAK,SACLD,UAAS,6BAAsC,IAAfhB,EAAsB,WAAa,IACnEkB,QAAS,kBAAMjB,GAAeD,IAHhC,sBAQGF,IAAaV,EAASsB,UACpBZ,IAAaV,EAASwB,QACtBZ,IAED,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPnB,EAAYX,EAASS,MACrBI,GAAc,IALlB,sBAeN,cAAC,EAAD,CAAUT,MAAOU,QG5GvBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.645f1733.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodList } from './GoodList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  window.console.log(sortType, isReversed);\n\n  if (sortType) {\n    visibleGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const realGoods\n  = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET ? 'is-light' : ''}`}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH ? 'is-light' : ''}`}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed !== true ? 'is-light' : ''}`}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n        {\n          (sortType === SortType.ALPHABET\n          || sortType === SortType.LENGTH\n          || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                setSortType(SortType.NONE);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n\n      </div>\n\n      <GoodList goods={realGoods} />\n\n    </div>\n  );\n};\n","export const GoodCard = ({ good }: { good: string }) => (\n  <li data-cy=\"Good\">\n    {good}\n  </li>\n);\n","import { GoodCard } from './GoodCard';\n\nexport const GoodList = ({ goods }: { goods: string[] }) => (\n  <ul>\n    {goods.map((good: string) => (\n      <GoodCard good={good} key={good} />\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}